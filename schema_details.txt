
We need to be familiar with the following schema details before making any request to my website/book-site's Backend API 
via the front-end UI(yet to be developed) or Postman or any other tool. 



## 'books' collection details
For the 'books' collection, we'll have the following properties.:

- _id → ObjectID(generated by Mongoose by default)
- ISBN → string(unique)
- title → string
- authors → array of ObjectID's(referred)
- language → string
- pubDate → string
- numOfPages → number
- category → array of strings
- publication → ObjectID(referred)

Here `_id` will be unique because every book will have its own id(ObjectID), generated by mongoose(by default).
Here `ISBN` will be unique because every book has its own `ISBN` number. 
`authors` will be an array containing referral ObjectID's of 'authors' collection because one book can have multiple authors. 
`publication` here has an ObjectID referring to 'publications' collection and we can assume that each book can have only one publisher. 
 Rest of the properties are self-explanatory.







## 'authors' collection details
For the 'authors' collection, we'll have the following properties:

- _id → ObjectID(generated by Mongoose by default)
- name → string
- books → array of strings

Here `_id` will be unique because every author will have his own id(ObjectID), generated by mongoose(by default). 
`books` will be an array of ISBN's because one author might have written multiple books. 
`name` of a book is a string. 







## 'publications' collection details
For the 'publications' collection, we'll have the following properties: 

- _id → ObjectID(generated by Mongoose by default)
- name → string
- books → array of strings

Here `_id` will be unique because every publication will have its own id(ObjectID) generated by mongoose(by default). 
`books` will be an array of ISBN's because one publication can publish multiple books. 
`name` of a publication is a string. 